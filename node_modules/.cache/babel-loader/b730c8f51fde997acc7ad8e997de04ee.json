{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.className = className;\nexports.isTouch = isTouch; // ==============================\n// NO OP\n// ==============================\n\nvar noop = exports.noop = function noop() {}; // ==============================\n// Class Name Prefixer\n// ==============================\n\n\nvar CLASS_PREFIX = exports.CLASS_PREFIX = 'react-images';\n/**\n String representation of component state for styling with class names.\n\n Expects an array of strings OR a string/object pair:\n - className(['comp', 'comp-arg', 'comp-arg-2'])\n   @returns 'react-images__comp react-images__comp-arg react-images__comp-arg-2'\n - className('comp', { some: true, state: false })\n   @returns 'react-images__comp react-images__comp--some'\n*/\n\nfunction className(name, state) {\n  var arr = Array.isArray(name) ? name : [name]; // loop through state object, remove falsey values and combine with name\n\n  if (state && typeof name === 'string') {\n    for (var _key in state) {\n      if (state.hasOwnProperty(_key) && state[_key]) {\n        arr.push(name + '--' + _key);\n      }\n    }\n  } // prefix everything and return a string\n\n\n  return arr.map(function (cn) {\n    return CLASS_PREFIX + '__' + cn;\n  }).join(' ');\n} // ==============================\n// Touch Capability Detector\n// ==============================\n\n\nfunction isTouch() {\n  try {\n    document.createEvent('TouchEvent');\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}